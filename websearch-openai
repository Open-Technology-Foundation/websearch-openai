#!/usr/bin/env bash
#shellcheck disable=SC1091,SC2155
# websearch-openai - Command-line interface for OpenAI's web search functionality
set -euo pipefail
readonly -- VERSION='1.0.0'
readonly -- PRG0="$(readlink -en -- "$0")"
#shellcheck disable=SC2034
readonly -- PRGDIR="${PRG0%/*}" PRG="${PRG0##*/}"
declare -ix VERBOSE=0
#shellcheck disable=SC2015
declare -- RED='' YELLOW='' NOCOLOR=''
[ -t 2 ] && RED=$'\033[0;31m' NOCOLOR=$'\033[0m' YELLOW=$'\033[0;33m'
vwarn() { ((VERBOSE)) || return 0; local msg; for msg in "$@"; do >&2 printf '%s: %swarn%s: %s\n' "$PRG" "$YELLOW" "$NOCOLOR" "$msg"; done; }
error() { local msg; for msg in "$@"; do >&2 printf '%s: %serror%s: %s\n' "$PRG" "$RED" "$NOCOLOR" "$msg"; done; }
die() { local -i exitcode=1; if (($#)); then exitcode=$1; shift; fi; if (($#)); then error "$@"; fi; exit "$exitcode"; }
noarg() { if (($# < 2)) || [[ ${2:0:1} == '-' ]]; then die 2 "Missing argument for option '$1'"; fi; true; }
decp() { declare -p "$@" | sed 's/^declare -[a-zA-Z-]* //'; }
xcleanup() { local -i exitcode=${1:-0}; exit "$exitcode"; }
trap 'xcleanup $?' SIGINT EXIT
# ----------------------------------------------------------------------------------------

command -v jq >/dev/null || die 1 "Requires jq"
command -v curl >/dev/null || die 1 "Requires curl"

declare -i TIMEOUT=42

declare -x OPENAI_MODEL=gpt-4o-mini
declare -x COUNTRY='' COUNTRYCODE='' REGION='' REGIONCODE='' REGIONNAME='' CITY='' ZIP='' TIMEZONE='' CONTEXT_SIZE=medium

declare -- QUERY='' QUERY_CONTEXT=''

usage() {
  cat <<EOT
$PRG $VERSION - OpenAI Web Search CLI

A command-line interface for OpenAI's web search functionality.
Requires OpenAI API access and OPENAI_API_KEY environment variable.

Usage:
  $PRG [OPTIONS] Query [QueryContext]

Arguments:
  Query               The search query to send to OpenAI (required, max 255 chars)
  QueryContext        Additional context for Query (optional, max 1024 chars)

Location Options:
  -N, --no-location   Erase location context
  -c, --country COUNTRYCODE
                      Two-letter country code (ISO 3166-1 alpha-2)
                      Current: $(decp COUNTRYCODE)
  -r, --region REGIONCODE
                      Region/state code
                      Current: $(decp REGIONCODE)
  -C, --city CITY
                      City name
                      Current: $(decp CITY)
  -t, --timezone TIMEZONE
                      Timezone in Region/City format (e.g., Asia/Jakarta)
                      Current: $(decp TIMEZONE)

Search Options:
  -s, --context-size CONTEXT_SIZE
                      Amount of web search context (low, medium, high)
                      Current: $(decp CONTEXT_SIZE)
  -m, --model OPENAI_MODEL
                      OpenAI model to use (gpt-4o, gpt-4o-mini)
                      Current: $(decp OPENAI_MODEL)

Output Options:
  -j, --json          Output raw JSON response
  -o, --output-to OUTPUT_TO
                      Write output to file instead of stdout

Configuration:
  -S, --save-defaults Save current settings as defaults
  -R, --reset-defaults Reset to factory defaults

General:
  -v, --verbose       Increase verbosity level
  -q, --quiet         Set verbosity to 0
  -V, --version       Print version and exit ($(decp VERSION))
  -h, --help          Display this help

Examples:
  $PRG "What's the weather like today?"
  $PRG -c ID -r BA -C '' "Local events this weekend"
  $PRG -m gpt-4o-mini -o results.md "Latest news about AI"
  $PRG -S -c ID -r JA -C "Jakarta" -t Asia/Jakarta # Save location defaults

EOT
  return 0
}

websearch() {
  local -- CONFIG_FILE="$HOME"/.config/"$PRG".conf
  if [[ -f "$CONFIG_FILE" ]]; then
    ((VERBOSE)) && "Sourcing config data from '$CONFIG_FILE'"
    source "$CONFIG_FILE"
  else
    fetch_location_data
  fi

  local -- output_to=/dev/stdout
  local -i save_defaults=0 json=0

  while (($#)); do case "$1" in
    -N|--no-location)
                  COUNTRYCODE='' COUNTRY='' REGIONCODE='' CITY='' TIMEZONE='' ;;
    -c|--country) noarg "$@"; shift; COUNTRYCODE=$1 ;;
    -r|--region)  noarg "$@"; shift; REGIONCODE=$1 ;;
    -C|--city)    noarg "$@"; shift; CITY=$1 ;;
    -s|--context-size)
                  noarg "$@"; shift; CONTEXT_SIZE=$1 ;;
    -t|--timezone)
                  noarg "$@"; shift; TIMEZONE=$1 ;;

    -m|--model)   noarg "$@"; shift; OPENAI_MODEL=$1 ;;

    -o|--output-to)
                  noarg "$@"; shift; output_to=$1 ;;
    -j|--json)    json=1 ;;

    -S|--save-defaults)
                  save_defaults=1 ;;
    -R|--reset-defaults)
                  rm -f "$CONFIG_FILE"
                  fetch_location_data
                  ;;

    -h|--help)    usage; exit 0;;
    -v|--verbose) VERBOSE+=1 ;;
    -q|--quiet)   VERBOSE=0 ;;
    -V|--version) echo "$PRG $VERSION"; exit 0;;
    -[NcrCstmojSRhvqV]*) #shellcheck disable=SC2046 #split up single options
                  set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
    -*)           die 22 "Invalid option '$1'" ;;
    *)            if [[ -z $QUERY ]]; then
                    QUERY=${1:0:255}
                  elif [[ -z $QUERY_CONTEXT ]]; then
                    QUERY_CONTEXT=${1:1024}
                  else
                    die 2 "Invalid argument '$1'"
                  fi
                  ;;
  esac; shift; done

  # sanity checks
  validate

  ((VERBOSE)) && decp COUNTRYCODE COUNTRY REGIONCODE CITY CONTEXT_SIZE TIMEZONE OPENAI_MODEL QUERY QUERY_CONTEXT

  ((save_defaults)) && {
    ((VERBOSE)) && >&2 echo "$PRG: Saving config to '$CONFIG_FILE'"
    decp COUNTRYCODE COUNTRY REGIONCODE CITY CONTEXT_SIZE TIMEZONE OPENAI_MODEL > "$CONFIG_FILE"
    [[ -z "$QUERY" ]] && exit 0
  }

  [[ -z "$QUERY" ]] && { usage; exit 1; }

  QUERY_CONTEXT+="$(locality_context)"
  ((VERBOSE)) && >&2 decp QUERY_CONTEXT

  result=$(timeout ${TIMEOUT}s curl -s --compressed "https://api.openai.com/v1/responses" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d '{
      "model": "'"$OPENAI_MODEL"'",
      "tools": [{
        "type": "web_search_preview",
        "user_location": {
          "type": "approximate",
          "country": "'"$COUNTRYCODE"'",
          "region": "'"$REGIONCODE"'",
          "city": "'"$CITY"'"'"$([ -n "$TIMEZONE" ] && echo ', "timezone": "'"$TIMEZONE"'"')"'
        },
        "search_context_size": "'"$CONTEXT_SIZE"'"
      }],
      "input": "'"${QUERY}${QUERY_CONTEXT}"'"
    }')

  # no validation for json mode
  if ((json)); then
    echo "$result" >"$output_to"
    return 0
  else

  # Extract result text using jq
  local parsed_result
  local -i index=0
  while ((index<3)); do
    parsed_result=$(jq -c .output[$index].content[0].text <<<"$result" 2>/dev/null)
    # Validate result
    [[ -n "$parsed_result" && "$parsed_result" != 'null' ]] && break
    ((VERBOSE)) && vwarn "Pass $index"
    index+=1
    if ((index > 2)); then
      ((VERBOSE)) && echo "$result" >/tmp/"$PRG"-error.json
      echo -e "!!Error: $PRG: No valid response from OpenAI API" >"$output_to"
      die 1 "Failed to parse API response or empty response received"
    fi
  done
  
  # Process result (remove quotes)
  result=$(sed 's/^"//; s/"$//' <<<"$parsed_result")
  
  echo -e "# $QUERY\n" >"$output_to"
  echo -e "$result" >>"$output_to"

  if command -v md2ansi >/dev/null && [[ ${output_to:0:5} != '/dev/' ]] && ((VERBOSE)); then
    md2ansi --width "${COLUMNS:-76}" "$output_to" | less -FXRS
  fi
  return 0
  fi
}

fetch_location_data() {
  # Fetch from ip-api.com
  ((VERBOSE)) && >&2 echo "$PRG: Retrieving location data from ip_api_info"
  declare -- ip_api_info tmpfile="${XDG_RUNTIME_DIR:-/tmp}"/"$PRG"-ip_vars-"$RANDOM".sh
  ip_api_info=$(timeout ${TIMEOUT}s curl -s http://ip-api.com/json/)
  # Check if request was successful
  if [[ $(jq -r '.status' <<<"$ip_api_info") == "success" ]]; then
    # Use jq to create a shell variable assignment script, then source it
    jq -r '. | to_entries | map("\(.key | ascii_upcase)=\(.value | @sh)") | .[]' \
      <<<"$ip_api_info" \
        |grep -v 'QUERY=' >"$tmpfile"
    source "$tmpfile"
    rm "$tmpfile"
    unset tmpfile ip_api_info
    REGIONCODE=$REGION
  else
    vwarn "Failed to retrieve location data from ip-api.com"
  fi
}

validate() {
  # Check for required API key
  [[ -z $OPENAI_API_KEY ]] && die 1 "Requires envvar OPENAI_API_KEY"

  # Validate location data
  if [[ -n "$COUNTRYCODE" && ! "$COUNTRYCODE" =~ ^[A-Z]{2}$ ]]; then
    vwarn "Invalid country code '$COUNTRYCODE', clearing"
    COUNTRYCODE=""
  fi
  if [[ -n "$REGIONCODE" && ! "$REGIONCODE" =~ ^[A-Z0-9]{1,3}$ ]]; then
    vwarn "Invalid region code '$REGIONCODE', clearing"
    REGIONCODE=""
  fi
  if [[ -n "$CITY" && ! "$CITY" =~ ^[A-Za-z][A-Za-z0-9\ .\-]{1,63}$ ]]; then
    vwarn "Invalid city name '$CITY', clearing"
    CITY=""
  fi
  if [[ -n "$TIMEZONE" && ! "$TIMEZONE" =~ ^[A-Za-z]+/[A-Za-z_]+$ ]]; then
    vwarn "Invalid timezone '$TIMEZONE'; must be in Region/City format (e.g., Asia/Makassar); clearing."
    TIMEZONE=''
  fi

  # Validate search parameters
  if [[ ! ("$CONTEXT_SIZE" == low || "$CONTEXT_SIZE" == medium || "$CONTEXT_SIZE" == high) ]]; then
    vwarn "Invalid context size '$CONTEXT_SIZE', setting to medium"
    CONTEXT_SIZE=medium
  fi

  if [[ ! ($OPENAI_MODEL == 'gpt-4o' || $OPENAI_MODEL == 'gpt-4o-mini') ]]; then
    vwarn "Invalid OpenAI model '$OPENAI_MODEL', setting to 'gpt-4o-mini'"
    OPENAI_MODEL=gpt-4o-mini
  fi

  return 0
}

locality_context() {
  local -- context result=''
  for context in COUNTRYCODE COUNTRY REGIONCODE CITY TIMEZONE; do
    [[ -n "${!context}" ]] && result+="$context=${!context} "
  done
  [[ -n $result ]] && echo " (Locality Context: $result$(decp LANG LANGUAGE LC_NUMERIC LC_TIME LC_MEASUREMENT |tr -d '"' |tr $'\n' ';' |sed 's/;/ /g')timestamp=$(date -Is))"
  return 0
}


websearch "$@"

#fin
